class Solution {
    public void dfs(int v, boolean[] visited, List<Integer>[] edgesng){
        visited[v]= true;
         Integer[] neighbors = new Integer[edgesng[v].size()]; 
  
        // ArrayList to Array Conversion 
        for (int i =0; i < edgesng[v].size(); i++) 
            neighbors[i] = edgesng[v].get(i); 
        // Integer[] neighbors = edgesng[v].toArray();
        for(int n=0;n<neighbors.length;n++){
            if(!visited[neighbors[n]]){
                dfs(neighbors[n], visited, edgesng);
            }
        }
    }
    public int countComponents(int n, int[][] edges) {
        int count=0;
        boolean[] visited = new boolean[n];
        for(int i=0;i<n;i++){
            visited[i]=false;
        }

        List<Integer>[] edgesng= new ArrayList[n];
        for (int j = 0; j < n; j++) { 
            edgesng[j] = new ArrayList<Integer>(); 
        } 
        for(int k=0;k<edges.length;k++){
            edgesng[edges[k][0]].add(edges[k][1]);
             edgesng[edges[k][1]].add(edges[k][0]);
        }
        for(int v=0;v<n;v++){
            if(!visited[v]){
                count=count+1;
                dfs(v, visited,edgesng);
            }
        }
        return count;
    }
}
